#include    "minishell.h"


typedef struct s_memory
{
    t_m    *next;
    t_m    *last;
    void        **heap;
    int         used;
}   t_m;

void    clean_heaps(void ***p)
{
    int i;
    int j;

    i = 0;
    while (i < MAXMM)
    {
        if (p[i] == NULL)
            break ;
        j = 0;
        while (j < MAXMM)
        {
            if ((*p[i])[j] != NULL)
                free((*p[i])[j]);
            j++;
        }
        free (p[i]);
    }
}

void    unregister(void ***p, void *new)
{
    int i;
    int j;

    i = 0;
    while (i < MAXMM)
    {
        if (p[i] == NULL)
            break ;
        j = 0;
        while (j < MAXMM)
        {
            if ((*p[i])[j] != new)
                j++;
        }
        if (j != MAXMM)
        {
            p[i][j] =NULL;
            free (new);
            break ;
        }
    }
}

int find_space(void ***p)
{
    
}

//add = 1 for add new, 0 for free address, -1 for free all
//return value to be defined, -1 for add fail, positive num for add success, -2 for clean success
int    heap_mngr(void *new, int add)
{
    static void **p[MAXMM];
    int         i;
    int         first_space;

    if (add)
    {
        first_space = find_space(p);
        if (!first_space)
        {
            i = 0;
            while (p[i] != NULL)
                i++;
            p[i] = malloc(sizeof(void *) * MAXMM);
            if (p[i] == NULL)
                return (-1);
            else
            {
                p[i][0] = new;
                return (i * MAXMM);
            }
        }
        else
        {
            p[first_space / MAXMM][first_space % MAXMM] = new;
            return (first_space);
        }

    }
    else if (add == 0)
    {
        unregister(p, new);
        return (-2);
    }
    else
    {
        clean_heaps(p);
        return (-2);
    }
}

//return -1 for fail to allocate heap
void    *mmalloc(size_t t)
{
    void    *p;
    int     i;
    
    p = malloc(t);
    if (p == NULL)
        return (p);
    else
    {
        i = heap_mngr(p, 1);
        if (i == -1)
        {
            free(p);
            return (NULL);
        }
        else
            return (p);
    }
        
}

void    mfree(void *p)
{
    heap_mngr(p, 0);
}